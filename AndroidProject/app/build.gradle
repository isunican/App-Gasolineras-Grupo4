plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.hilt)
    alias(libs.plugins.sonarqube)
    id "jacoco"
}

apply plugin: "jacoco"

jacoco {
    toolVersion = '0.8.12'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // Soporte para Robolectric
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'connectedAndroidTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', 'hilt**', 'dagger']
    def mainSrc = "$project.projectDir/src/main/java"
    def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([javaTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

sonar {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "isuc"
        property "sonar.token", "120537998e2c122476f30cade8d4a25865210fa6"
        property "sonar.projectKey", "App-Gasolineras-Grupo4"
        property "sonar.projectName", "App-Gasolineras-Grupo4"
        property "sonar.scm.disabled", true
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml, ${project.buildDir}/reports/coverage/androidTest/debug/connected/report.xml"
    }
}

android {
    namespace 'es.unican.gasolineras'
    compileSdk 34

    defaultConfig {
        applicationId "es.unican.gasolineras"
        minSdk 28
        targetSdk 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "es.unican.gasolineras.utils.CustomTestRunner"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // Dependencias de la librería (libs)
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.room.common
    implementation libs.espresso.contrib
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    // Parceler (genera métodos para parcelas)
    implementation libs.parceler.api
    annotationProcessor libs.parceler

    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    // GSON (json serialization)
    implementation libs.gson

    // Retrofit (API REST)
    implementation libs.retrofit
    implementation libs.retrofit.gson

    // Mockito (mocks para testing)
    testImplementation libs.mockito.core
    androidTestImplementation libs.mockito.android

    // Hilt (inyección de dependencias)
    implementation libs.hilt.android
    annotationProcessor libs.hilt.compiler
    androidTestImplementation libs.hilt.android.testing
    androidTestAnnotationProcessor libs.hilt.compiler
    testImplementation libs.hilt.android.testing
    testAnnotationProcessor libs.hilt.compiler

    // Roboelectric
    testImplementation libs.roboelectric

    // Librería Room
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // Mockito para pruebas
    def mockito_version= '5.0.0'
    testImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"

    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.6.1'

    // DatePicker de Material
    implementation 'com.google.android.material:material:1.6.1'

    // MPAndroidChart para gráficos
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}
